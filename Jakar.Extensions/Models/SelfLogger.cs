// Jakar.Extensions :: Jakar.Extensions
// 07/30/2025  14:40

namespace Jakar.Extensions;


/// <summary> A simple source of information generated by Serilog itself, for example when exceptions are thrown and caught internally. </summary>
public static class SelfLogger
{
    private static Action<string>? _output;


    /// <summary> An <see cref="SelfLogFailureListener"/> that writes diagnostic information to <see cref="SelfLogger"/>. Sinks that support failure listeners should use this instance by default. </summary>
    public static SelfLogFailureListener FailureListener { get; set; } = new();


    /// <summary> Set the output mechanism for self-log messages. </summary>
    /// <param name="output"> A synchronized <see cref="TextWriter"/> to which self-log messages will be written. </param>
    /// <exception cref="ArgumentNullException"> When <paramref name="output"/> is <code>null</code> </exception>

    // ReSharper disable once MemberCanBePrivate.Global
    public static void Enable( TextWriter output )
    {
        ArgumentNullException.ThrowIfNull(output);

        Enable(m =>
               {
                   output.WriteLine(m);
                   output.Flush();
               });
    }

    /// <summary> Set the output mechanism for self-log messages. </summary>
    /// <param name="output"> An action to invoke with self-log messages. </param>
    /// // ReSharper disable once MemberCanBePrivate.Global
    /// <exception cref="ArgumentNullException"> When <paramref name="output"/> is <code>null</code> </exception>
    public static void Enable( Action<string> output ) { _output = Validate.ThrowIfNull(output); }

    /// <summary> Clear the output mechanism and disable self-log events. </summary>
    /// // ReSharper disable once MemberCanBePrivate.Global
    public static void Disable() { _output = null; }


    public static void WriteLine<TArg0>( [StructuredMessageTemplate]                             string format, TArg0 arg0 )                                                 { _output?.Invoke(string.Format($"{DateTime.UtcNow:o} {format}", arg0)); }
    public static void WriteLine<TArg0, TArg1>( [StructuredMessageTemplate]                      string format, TArg0 arg0, TArg1 arg1 )                                     { _output?.Invoke(string.Format($"{DateTime.UtcNow:o} {format}", arg0, arg1)); }
    public static void WriteLine<TArg0, TArg1, TArg2>( [StructuredMessageTemplate]               string format, TArg0 arg0, TArg1 arg1, TArg2 arg2 )                         { _output?.Invoke(string.Format($"{DateTime.UtcNow:o} {format}", arg0, arg1, arg2)); }
    public static void WriteLine<TArg0, TArg1, TArg2, TArg3>( [StructuredMessageTemplate]        string format, TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3 )             { _output?.Invoke(string.Format($"{DateTime.UtcNow:o} {format}", arg0, arg1, arg2, arg3)); }
    public static void WriteLine<TArg0, TArg1, TArg2, TArg3, TArg4>( [StructuredMessageTemplate] string format, TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4 ) { _output?.Invoke(string.Format($"{DateTime.UtcNow:o} {format}", arg0, arg1, arg2, arg3, arg4)); }



    public class SelfLogFailureListener
    {
        public virtual void OnLoggingFailed<TKind, TLogEvent>( object sender, TKind kind, string message, Exception? exception ) =>
            _output?.Invoke(exception is not null
                                ? string.Format($"{DateTime.UtcNow:o} {sender.GetType()}: {message} ({kind}){Environment.NewLine}{exception}")
                                : string.Format($"{DateTime.UtcNow:o} {sender.GetType()}: {message} ({kind})"));


        public virtual void OnLoggingFailed<TKind, TLogEvent>( object sender, TKind kind, string message, IReadOnlyCollection<TLogEvent>? events, Exception? exception )
        {
            Action<string>? action = _output;
            if ( action is null ) { return; }

            object count = events?.Count ?? (object)"unspecified";

            action.Invoke(exception is not null
                              ? string.Format($"{DateTime.UtcNow:o} {sender.GetType()}: {message} ({kind}, {count} events){Environment.NewLine}{exception}")
                              : string.Format($"{DateTime.UtcNow:o} {sender.GetType()}: {message} ({kind}, {count} events)"));
        }
    }
}
