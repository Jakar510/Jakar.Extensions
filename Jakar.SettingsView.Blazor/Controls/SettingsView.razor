@using System.Globalization
@inherits ComponentBase


<CascadingValue TValue="SettingsView"
                Value="@( this )" >
    <CascadingValue IsFixed="false"
                    Name="@SV_SECTION_HEADER_ICON_EXPANDED"
                    TValue="string"
                    Value="@_expandedIcon" >
        <CascadingValue IsFixed="false"
                        Name="@SV_SECTION_HEADER_ICON_COLLAPSED"
                        TValue="string"
                        Value="@_collapsedIcon" >
            <div class="@SV_ROOT"
                 for="@ID" >
                <ol class="@SV_ROOT_LIST" >
                    @foreach ( SvSection section in Sections )
                    {
                        @if ( section.IsVisible is false ) { continue; }

                        <li class="@SV_SECTION"
                            @key="@section.ID" >
                            @section.Fragment
                        </li>
                    }
                </ol>
            </div>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>


@code
{
    [Parameter]                                public             string                               ID                   { get; set; } = Guid.NewGuid().ToString();
    [Parameter]                                public             IList<SvSection>                     Sections             { get; set; } = new ObservableCollection<SvSection>();
    [Parameter]                                public             string?                              ExpandedIcon         { get; set; }
    [Parameter]                                public             EventCallback<string?>               ExpandedIconChanged  { get; set; }
    [Parameter]                                public             string?                              CollapsedIcon        { get; set; }
    [Parameter]                                public             EventCallback<string?>               CollapsedIconChanged { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public             IReadOnlyDictionary<string, object>? HtmlAttributes       { get; set; }
    [CascadingParameter]                       protected internal EditContext?                         CascadedEditContext  { get; set; }
    [Parameter]                                public             CultureInfo?                         Culture              { get; set; }
    [CascadingParameter]                       public             CultureInfo?                         DefaultCulture       { get; set; }
    public                                                        CultureInfo                          CurrentCulture       => Culture ?? DefaultCulture ?? CultureInfo.CurrentUICulture;


    private string? _expandedIcon;
    private string? _collapsedIcon;


    protected override async Task OnParametersSetAsync()
    {
        await SetExpandedIcon(ExpandedIcon);
        await SetCollapsedIcon(CollapsedIcon);
    }


    public async Task SetExpandedIcon( string? icon )
    {
        if ( _expandedIcon == icon ) { return; }

        _expandedIcon = icon;
        await ExpandedIconChanged.InvokeAsync(icon);
    }
    public async Task SetCollapsedIcon( string? icon )
    {
        if ( _collapsedIcon == icon ) { return; }

        _collapsedIcon = icon;
        await CollapsedIconChanged.InvokeAsync(icon);
    }

    public void OnAppearing()
    {
        foreach ( SvSection section in Sections ) { section.OnAppearing(); }
    }
    public void OnDisappearing()
    {
        foreach ( SvSection section in Sections ) { section.OnDisappearing(); }
    }
}
