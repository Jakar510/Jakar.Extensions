@inherits ValueCellBase<double>


<div class="@SV_CELL_BODY @Class"
     id="@ID"
     @onclick="OnClickHandler" >
    <div class="@SV_CELL_BODY_TITLE"
         id="@ID-title" >
        @Title
    </div>
    <div class="@SV_CELL_BODY_DESCRIPTION"
         id="@ID-description" >
        @Description
    </div>
    <div class="@SV_CELL_BODY_HINT"
         id="@ID-hint" >
        @Hint
    </div>
    <div class="@SV_CELL_BODY_VALUE_ENTRY"
          id="@ID-value" >
        @ValueText
    </div>

    <ValidationMessage For="@ValueExpression" />
</div>


@code
{
    // ReSharper disable once CSharpWarnings::CS8618
    private OptionsPopup<double> __selector;

    public override                             WidgetType            Type       => WidgetType.NumberPicker;
    [Parameter]                 public          IList<double>         Values     { get; set; } = new ObservableCollection<double>();
    [Parameter]                 public          Func<double, string>? Formatter  { get; set; }
    [Parameter, EditorRequired] public required string                PopupTitle { get; set; }


    protected override void OnParametersSet()
    {
        Formatter ??= DefaultFormatter;

        __selector = new OptionsPopup<double>
                    {
                        ID        = ID,
                        Close     = new EventCallback<double>(this, SetValue),
                        Title     = PopupTitle,
                        Formatter = Formatter
                    };
    }

    public        string DefaultFormatter( double x ) => x.ToString(CurrentCulture);
    private async Task   OnClickHandler()             => await __selector.OpenAsync(_control, Values, ValueChanged, ValueExpression);
}
