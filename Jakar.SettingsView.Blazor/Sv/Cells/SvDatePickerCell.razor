@using System.Diagnostics
@using Radzen
@using Radzen.Blazor
@inherits ValueCellBase<DateTime>


<div class="@SV_CELL_BODY @Class"
     id="@ID" >
    <div class="@SV_CELL_BODY_TITLE"
         id="@ID-title" >
        @Title
    </div>
    <div class="@SV_CELL_BODY_DESCRIPTION"
         id="@ID-description" >
        @Description
    </div>
    <div class="@SV_CELL_BODY_HINT"
         id="@ID-hint" >
        @Hint
    </div>
    <div Class="@SV_CELL_BODY_VALUE_ENTRY"
         type="datetime-local"
         UniqueID="@ID-value" >
        <RadzenDatePicker PopupRenderMode="PopupRenderMode.OnDemand"
                          @ref="__picker"
                          TValue="DateTime"
                          Value="@Value"
                          ValueChanged="@ValueChanged"
                          ValueExpression="@ValueExpression" />
    </div>

    <ValidationMessage For="@ValueExpression" />
</div>


@code
{
    public const       string                       DATE_FORMAT      = "yyyy-MM-dd";
    public const       string                       TIME_FORMAT      = "HH:mm:ss.fffffffzzz";
    public const       string                       DATE_TIME_FORMAT = "yyyy-MM-ddTHH:mm:ss.fffffffzzz";
    private            RadzenDatePicker<DateTime>?  __picker;
    public override    WidgetType                   Type             => WidgetType.Date;
    [Parameter] public bool                         AllowClear       { get; set; }
    [Parameter] public int                          TabIndex         { get; set; }
    [Parameter] public string                       InputClass       { get; set; } = string.Empty;
    [Parameter] public DateTime?                    InitialViewDate  { get; set; }
    [Parameter] public Action<DateRenderEventArgs>? DateRender       { get; set; }
    [Parameter] public DateTimeKind                 Kind             { get; set; } = DateTimeKind.Local;
    [Parameter] public bool                         TimeOnly         { get; set; }
    [Parameter] public bool                         ReadOnly         { get; set; }
    [Parameter] public bool                         AllowInput       { get; set; }
    [Parameter] public bool                         ShowButton       { get; set; } = true;
    [Parameter] public bool                         ShowDays         { get; set; } = true;
    [Parameter] public bool                         ShowTime         { get; set; }
    [Parameter] public bool                         ShowSeconds      { get; set; }
    [Parameter] public bool                         PadHours         { get; set; }
    [Parameter] public bool                         PadMinutes       { get; set; }
    [Parameter] public bool                         PadSeconds       { get; set; }
    [Parameter] public bool                         ShowTimeOkButton { get; set; }
    [Parameter] public string                       DateFormat       { get; set; } = DATE_TIME_FORMAT;
    [Parameter] public string                       HourFormat       { get; set; } = "12";
    [Parameter] public string                       Placeholder      { get; set; } = string.Empty;


    protected override Task OnParametersSetAsync()
    {
        Debug.Assert(__picker is not null, nameof(__picker));

        __picker.Change             = new EventCallback<DateTime?>(this, SetValue);
        __picker.CurrentDateChanged = new EventCallback<DateTime>(this, SetValue);
        __picker.InitialViewDate    = Value;
        __picker.Min                = Min;
        __picker.Max                = Max;
        __picker.TabIndex           = TabIndex;
        __picker.DateRender         = DateRender;
        __picker.Culture            = Culture;
        __picker.DefaultCulture     = DefaultCulture;
        __picker.TimeOnly           = TimeOnly;
        __picker.ReadOnly           = ReadOnly;
        __picker.AllowInput         = AllowInput;
        __picker.ShowButton         = ShowButton;
        __picker.Disabled           = IsDisabled;
        __picker.ShowDays           = ShowDays;
        __picker.ShowTime           = ShowTime;
        __picker.ShowSeconds        = ShowSeconds;
        __picker.PadHours           = PadHours;
        __picker.PadMinutes         = PadMinutes;
        __picker.PadSeconds         = PadSeconds;
        __picker.ShowTimeOkButton   = ShowTimeOkButton;
        __picker.DateFormat         = DateFormat;
        __picker.HourFormat         = HourFormat;
        __picker.Placeholder        = Placeholder;

        return base.OnParametersSetAsync();
    }

}
